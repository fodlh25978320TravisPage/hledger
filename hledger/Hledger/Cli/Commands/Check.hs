{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TemplateHaskell #-}

module Hledger.Cli.Commands.Check (
  checkmode
 ,check
) where

import Hledger
import Hledger.Cli.CliOptions
import Hledger.Cli.Commands.Checkdupes (checkdupes)
import Hledger.Cli.Commands.Checkdates (checkdates)
import System.Console.CmdArgs.Explicit
import Data.Either (partitionEithers)
import Data.Char (toUpper)
import Safe (readMay)
import Control.Monad (forM_)

checkmode :: Mode RawOpts
checkmode = hledgerCommandMode
  $(embedFileRelative "Hledger/Cli/Commands/Check.txt")
  []
  [generalflagsgroup1]
  hiddenflags
  ([], Just $ argsFlag "[CHECKS]")

check :: CliOpts -> Journal -> IO ()
check copts@CliOpts{..} j = do
  let 
    args = listofstringopt "args" rawopts_
    -- we must reset the report spec generated by argsToCliOpts
    -- since we are not using arguments as a query in the usual way,
    copts' = 
      case updateReportSpecFromOpts update reportspec_ of
        Left e -> error' e
        Right rs -> copts{reportspec_=rs}
      where update ropts = ropts{querystring_=[]}

  case partitionEithers (map parseCheck args) of
    (unknowns@(_:_), _) -> error' $ "These checks are unknown: "++unwords unknowns
    ([], checks) -> forM_ checks $ runCheck copts' j
      
-- | A type of error check that we can perform on the data.
data Check =
    Dates
  | Leafnames
  deriving (Read,Show,Eq)

-- | Parse the lower-case name of an error check, or return the name unparsed.
parseCheck :: String -> Either String Check
parseCheck s = maybe (Left s) Right $ readMay $ capitalise s

capitalise :: String -> String
capitalise (c:cs) = toUpper c : cs
capitalise s = s

-- | Parse a check argument: a string which is the lower-case name of an error check,
-- followed by zero or more space-separated arguments for that check.
-- parseCheckArgument :: String -> Either String (Check,[String])

runCheck :: CliOpts -> Journal -> Check -> IO ()
runCheck copts j = 
  \case
    Dates     -> checkdates copts j
    Leafnames -> checkdupes copts j

