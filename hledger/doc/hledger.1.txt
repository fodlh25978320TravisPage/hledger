
hledger(1)                   hledger User Manuals                   hledger(1)



NNAAMMEE
       hledger - a command-line accounting tool

SSYYNNOOPPSSIISS
       hledger [-f FILE] COMMAND [OPTIONS] [CMDARGS]
       hledger [-f FILE] ADDONCMD -- [OPTIONS] [CMDARGS]

DDEESSCCRRIIPPTTIIOONN
       hledger  is  a  cross-platform program for tracking money, time, or any
       other commodity, using double-entry accounting and a  simple,  editable
       file  format.  It is inspired by and largely compatible with ledger(1).
       Tested on unix, mac, windows, hledger aims to be a reliable,  practical
       tool for daily use.

       This is hledger's command-line interface (there are also curses and web
       interfaces).  Its basic function is to read a plain text file  describ-
       ing financial transactions (in accounting terms, a general journal) and
       print useful reports  on  standard  output,  or  export  them  as  CSV.
       hledger  can also read CSV files, converting them semi-automatically to
       journal format.  Additionally, hledger lists other  hledger-*  executa-
       bles found in the user's $PATH and can invoke them as subcommands.

       The journal file is ~/.hledger.journal by default, or another file path
       specified by $LEDGER_FILE.  (This should be a  real  environment  vari-
       able,  not a shell variable.) You can also specify a file with -f FILE,
       or standard input with -f-.

       Transactions are dated movements of money between two (or  more)  named
       accounts, and are recorded with journal entries like this:

              2015/10/16 bought food
               expenses:food          $10
               assets:cash

       For more about the format, see hledger_journal(5).

       Most  users use a text editor to edit the journal, usually with an edi-
       tor mode such as ledger-mode for added convenience.  hledger's interac-
       tive  add  command  is another way to record new transactions.  hledger
       never changes existing transactions.

       To get started, you can either save some  entries  like  the  above  in
       ~/.hledger.journal,  or  run  hledger add and follow the prompts.  Then
       try some commands like hledger print or hledger balance.  See  COMMANDS
       and EXAMPLES below.

EEXXAAMMPPLLEESS
       Two simple transactions in hledger journal format:

              2015/9/30 gift received
                assets:cash   $20
                income:gifts

              2015/10/16 farmers market
                expenses:food    $10
                assets:cash

       Some basic reports:

              $ hledger print
              2015/09/30 gift received
                  assets:cash            $20
                  income:gifts          $-20

              2015/10/16 farmers market
                  expenses:food           $10
                  assets:cash            $-10

              $ hledger accounts --tree
              assets
                cash
              expenses
                food
              income
                gifts

              $ hledger balance
                               $10  assets:cash
                               $10  expenses:food
                              $-20  income:gifts
              --------------------
                                 0

              $ hledger register cash
              2015/09/30 gift received   assets:cash               $20           $20
              2015/10/16 farmers market  assets:cash              $-10           $10

              $ hledger                                 # show available commands
              $ hledger add                             # add more transactions to the journal file
              $ hledger balance                         # all accounts with aggregated balances
              $ hledger balance --help                  # show help for balance command
              $ hledger balance --depth 1               # only top-level accounts
              $ hledger register                        # show account postings, with running total
              $ hledger reg income                      # show postings to/from income accounts
              $ hledger reg 'assets:some bank:checking' # show postings to/from this checking account
              $ hledger print desc:shop                 # show transactions with shop in the description
              $ hledger activity -W                     # show transaction counts per week as a bar chart

OOPPTTIIOONNSS
       To see general help and the command list: hledger --help or hledger

       To see all options available with a command: hledger COMMAND --help

       Except  for  the  General  options below, options must be written after
       COMMAND, not before it.

       Also, when invoking external add-on commands,  their  options  must  be
       written  after  a double hyphen.  (Or, you can invoke the external com-
       mand directly.) Eg:

              $ hledger ui -- --register cash
              $ hledger-ui --register cash

       Options and command arguments can be intermixed.  Arguments are usually
       interpreted as a search query which filters the data, see QUERIES.

       There are three kinds of options.  General options are always available
       and can appear anywhere in the command line:

       --hh ----hheellpp
              show general help or (after command) command help

       ----vveerrssiioonn
              show version information

       --ff FFIILLEE ----ffiillee==FFIILLEE
              use a different input file.  For stdin, use -

       ----rruulleess--ffiillee==RRUULLEESSFFIILLEE
              Conversion  rules  file  to  use  when  reading  CSV   (default:
              FILE.rules)

       ----aalliiaass==OOLLDD==NNEEWW
              display accounts named OLD as NEW

       ----iiggnnoorree--aasssseerrttiioonnss
              ignore any failing balance assertions in the journal

       ----ddeebbuugg==NN
              : show debug output if N is 1-9 (default: 0)

       Common  reporting options are supported by most commands where applica-
       ble, and individual commands may  provide  additional  command-specific
       options.  Both of these must be written after the command name.

       --bb ----bbeeggiinn==DDAATTEE
              include postings/txns on or after this date

       --ee ----eenndd==DDAATTEE
              include postings/txns before this date

       --DD ----ddaaiillyy
              multiperiod/multicolumn report by day

       --WW ----wweeeekkllyy
              multiperiod/multicolumn report by week

       --MM ----mmoonntthhllyy
              multiperiod/multicolumn report by month

       --QQ ----qquuaarrtteerrllyy
              multiperiod/multicolumn report by quarter

       --YY ----yyeeaarrllyy
              multiperiod/multicolumn report by year

       --pp ----ppeerriioodd==PPEERRIIOODDEEXXPP
              set  start date, end date, and/or reporting interval all at once
              (overrides the flags above)

       ----ddaattee22 ----aauuxx--ddaattee
              use postings/txns' secondary dates instead

       --CC ----cclleeaarreedd
              include only cleared postings/txns

       ----ppeennddiinngg
              include only pending postings/txns

       --UU ----uunncclleeaarreedd
              include only uncleared (and pending) postings/txns

       --RR ----rreeaall
              include only non-virtual postings

       ----ddeepptthh==NN
              hide accounts/postings deeper than N

       --EE ----eemmppttyy
              show empty/zero things which are normally omitted

       --BB ----ccoosstt
              show amounts in their cost price's commodity

   MMuullttiippllee ffiilleess
       One may specify the --file FILE option multiple times.  This is equiva-
       lent to concatenating the files to standard input and passing --file -,
       except that the add command functions normally and adds entries to  the
       first specified file.

   RReeppeeaatteedd ooppttiioonnss
       Otherwise, if a reporting option is repeated, the last one takes prece-
       dence.  Eg -p jan -p feb is equivalent to -p feb.

   DDeepptthh lliimmiittiinngg
       With the --depth N option, commands like account, balance and  register
       will  show  only  the  uppermost  accounts in the account tree, down to
       level N.  Use this when you want a summary with less detail.

   SSmmaarrtt ddaatteess
       hledger's user interfaces accept a flexible "smart date" syntax (unlike
       dates  in the journal file).  Smart dates allow some english words, can
       be relative to today's date, and can have less-significant  date  parts
       omitted (defaulting to 1).

       Examples:


       tab(@);   lw(33.7n)  lw(36.3n).   T{  2009/1/1,  2009/01/01,  2009-1-1,
       2009.1.1   T}@T{ simple dates, several separators allowed T} T{ 2009/1,
       2009  T}@T{  same as above - a missing day or month defaults to 1 T} T{
       1/1, january, jan, this year T}@T{ relative dates, meaning january 1 of
       the  current  year  T}  T{ next year T}@T{ january 1 of next year T} T{
       this month T}@T{ the 1st of the current month T} T{ this week T}@T{ the
       most  recent monday T} T{ last week T}@T{ the monday of the week before
       this one T} T{ lastweek T}@T{ spaces are optional T} T{ today,  yester-
       day, tomorrow T}@T{ T}

   RReeppoorrttiinngg iinntteerrvvaall
       A  reporting  interval can be specified so that commands like register,
       balance and activity will divide their  reports  into  multiple  report
       periods.   The  basic intervals can be selected with one of -D/--daily,
       -W/--weekly, -M/--monthly, -Q/--quarterly, or -Y/--yearly.   More  com-
       plex intervals may be specified with a period expression.

   PPeerriioodd eexxpprreessssiioonnss
       The  -p/--period  option accepts period expressions, a shorthand way of
       expressing a start date, end date, and or  reporting  interval  all  at
       once.   Note  a  period  expression  on the command line will cause any
       other date flags (-b/-e/-D/-W/-M/-Q/-Y) to be ignored.

       hledger's period expressions are similar to Ledger's, though not  iden-
       tical.   Here's  a basic period expression specifying the first quarter
       of 2009.  Note hledger always treats start dates as inclusive  and  end
       dates as exclusive:

              -p "from 2009/1/1 to 2009/4/1"

       Keywords  like  "from"  and  "to"  are optional, and so are the spaces.
       Just don't run two dates together:

              -p2009/1/1to2009/4/1
              -p"2009/1/1 2009/4/1"

       Dates are smart dates, so if the current year is 2009,  the  above  can
       also be written as:

              -p "1/1 to 4/1"
              -p "january to apr"
              -p "this year to 4/1"

       If you specify only one date, the missing start or end date will be the
       earliest or latest transaction in your journal:

              -p "from 2009/1/1"  (everything after january 1, 2009)
              -p "from 2009/1"    (the same)
              -p "from 2009"      (the same)
              -p "to 2009"        (everything before january 1, 2009)

       A single date with no "from" or "to" defines both  the  start  and  end
       date like so:

              -p "2009"           (the year 2009;    equivalent to "2009/1/1 to 2010/1/1")
              -p "2009/1"         (the month of jan; equivalent to "2009/1/1 to 2009/2/1")
              -p "2009/1/1"       (just that day;    equivalent to "2009/1/1 to 2009/1/2")

       Period  expressions  can  also start with (or be) a reporting interval:
       daily, weekly, monthly, quarterly, yearly,  or  one  of  the  every ...
       expressions  below.   Optionally  the  word  in  may appear between the
       reporting interval and the start/end dates.  Examples:

              -p "weekly from 2009/1/1 to 2009/4/1"
              -p "monthly in 2008"
              -p "bimonthly from 2008"
              -p "quarterly"
              -p "every 2 weeks"
              -p "every 5 days from 1/3"
              -p "every 15th day of month"
              -p "every 4th day of week"

   RReegguullaarr EExxpprreessssiioonnss
       hledger uses regular expressions in a number of places:

       +o query terms, on the command line and in the hledger-web search  form:
         REGEX, desc:REGEX, cur:REGEX, tag:...=REGEX

       +o CSV rules conditional blocks: if REGEX ...

       +o account  alias  directives  and options: alias /REGEX/ = REPLACEMENT,
         --alias /REGEX/=REPLACEMENT

       hledger's regular expressions come from  the  regex-tdfa  library.   In
       general they:

       +o are case insensitive

       +o are  infix  matching  (do  not  need  to match the entire thing being
         matched)

       +o are POSIX extended regular expressions

       +o also support GNU word boundaries (\<, \>, \b, \B)

       +o and parenthesised capturing  groups  and  numeric  backreferences  in
         replacement strings

       +o do not support mode modifiers like (?s)

       Some things to note:

       +o In  the  alias directive and --alias option, regular expressions must
         be enclosed in forward  slashes  (/REGEX/).   Elsewhere  in  hledger,
         these are not required.

       +o To match a regular expression metacharacter like $ as a literal char-
         acter, prepend a backslash.  Eg to search for amounts with the dollar
         sign in hledger-web, write cur:\$.

       +o On  the command line, some metacharacters like $ have a special mean-
         ing to the shell and so must be escaped a second time, with single or
         double  quotes  or  another backslash.  Eg, to match amounts with the
         dollar sign from the command line, write cur:'\$' or cur:\\$.

QQUUEERRIIEESS
       One of hledger's strengths is being able to quickly report  on  precise
       subsets  of  your data.  Most commands accept an optional query expres-
       sion, written as arguments after the command name, to filter  the  data
       by  date,  account  name or other criteria.  The syntax is similar to a
       web search: one or more space-separated search terms, quotes to enclose
       whitespace,  optional  prefixes  to  match  specific  fields.  Multiple
       search terms are combined as follows:

       All commands except print:  show  transactions/postings/accounts  which
       match (or negatively match)

       +o any of the description terms AND

       +o any of the account terms AND

       +o all the other terms.

       The print command: show transactions which

       +o match any of the description terms AND

       +o have any postings matching any of the positive account terms AND

       +o have no postings matching any of the negative account terms AND

       +o match all the other terms.

       The following kinds of search terms can be used:

       RREEGGEEXX  match account names by this regular expression

       aacccctt::RREEGGEEXX
              same as above

       aammtt::NN,, aammtt::<<NN,, aammtt::<<==NN,, aammtt::>>NN,, aammtt::>>==NN
              match  postings with a single-commodity amount that is equal to,
              less than, or greater than N.  (Multi-commodity amounts are  not
              tested, and will always match.) The comparison has two modes: if
              N is preceded by a + or - sign (or is 0), the two signed numbers
              are  compared.  Otherwise, the absolute magnitudes are compared,
              ignoring sign.

       ccooddee::RREEGGEEXX
              match by transaction code (eg check number)

       ccuurr::RREEGGEEXX
              match postings or transactions including any amounts whose  cur-
              rency/commodity  symbol  is fully matched by REGEX.  (For a par-
              tial match, use .*REGEX.*).  Note, to match characters which are
              regex-significant, like the dollar sign ($), you need to prepend
              \.  And when using the command line you need  to  add  one  more
              level  of  quoting  to  hide  it  from  the  shell,  so  eg  do:
              hledger print cur:'\$' or hledger print cur:\\$.

       ddeesscc::RREEGGEEXX
              match transaction descriptions

       ddaattee::PPEERRIIOODDEEXXPPRR
              match dates  within  the  specified  period  (which  should  not
              include a reporting interval

       ddaattee22::PPEERRIIOODDEEXXPPRR
              as above, but match secondary dates

       ddeepptthh::NN
              match  (or  display,  depending on command) accounts at or above
              this depth

       rreeaall::,, rreeaall::00
              match real or virtual postings respectively

       ssttaattuuss::**,, ssttaattuuss::!!,, ssttaattuuss::
              match  cleared,  pending,  or   uncleared/pending   transactions
              respectively

       ttaagg::RREEGGEEXX[[==RREEGGEEXX]]
              match  by  tag  name,  and optionally also by tag value.  Note a
              tag: query is considered to match a transaction  if  it  matches
              any  of  the  postings.  Also remember that postings inherit the
              tags of their parent transaction.

       nnoott::   before any of the above negates the match.

          *   *   *   *   *

       Some of these can also be expressed as command-line options (eg depth:2
       is  equivalent  to --depth 2).  Generally you can mix options and query
       arguments, and the resulting query will be their intersection  (perhaps
       excluding the -p/--period option).

CCOOMMMMAANNDDSS
       hledger  provides  a  number  of subcommands; hledger with no arguments
       shows a list.

       If you install additional hledger-* packages, or if you put programs or
       scripts  named  hledger-NAME in your PATH, these will also be listed as
       subcommands.

       Run  a  subcommand  by  writing  its  name  as   first   argument   (eg
       hledger incomestatement).  You can also write any unambiguous prefix of
       a command name (hledger inc), or one of the standard short aliases dis-
       played in the command list (hledger is).

   aaccccoouunnttss
       Show account names.

       ----ttrreeee show short account names, as a tree

       ----ffllaatt show full account names, as a list (default)

       ----ddrroopp==NN
              in flat mode: omit N leading account name parts

       This  command  lists  all  account  names  that are in use (ie, all the
       accounts which have at least one transaction posting  to  them).   With
       query arguments, only matched account names are shown.

       It  shows  a flat list by default.  With --tree, it uses indentation to
       show the account hierarchy.

       In flat mode you can add --drop N to omit the first  few  account  name
       components.

       Examples:

              $ hledger accounts --tree
              assets
                bank
                  checking
                  saving
                cash
              expenses
                food
                supplies
              income
                gifts
                salary
              liabilities
                debts

              $ hledger accounts --drop 1
              bank:checking
              bank:saving
              cash
              food
              supplies
              gifts
              salary
              debts

              $ hledger accounts
              assets:bank:checking
              assets:bank:saving
              assets:cash
              expenses:food
              expenses:supplies
              income:gifts
              income:salary
              liabilities:debts

   aaccttiivviittyy
       Show an ascii barchart of posting counts per interval.

       The  activity  command  displays an ascii histogram showing transaction
       counts by day, week, month or other reporting interval (by day  is  the
       default).  With query arguments, it counts only matched transactions.

              $ hledger activity --quarterly
              2008-01-01 **
              2008-04-01 *******
              2008-07-01
              2008-10-01 **

   aadddd
       Prompt for transactions and add them to the journal.

       ----nnoo--nneeww--aaccccoouunnttss
              don't  allow  creating  new  accounts;  helps prevent typos when
              entering account names

       Many hledger users edit their journals directly with a text editor,  or
       generate  them from CSV.  For more interactive data entry, there is the
       add command, which prompts interactively on the console for new  trans-
       actions,  and  appends  them to the journal file (existing transactions
       are not changed).  This is the only hledger command that writes to  the
       journal file.

       To use it, just run hledger add and follow the prompts.  You can add as
       many transactions as you like; when you are finished, enter . or  press
       control-d or control-c to exit.

       Features:

       +o add  tries  to provide useful defaults, using the most similar recent
         transaction (by description) as a template.

       +o You can also set the initial defaults with command line arguments.

       +o Readline-style edit keys can be used during data entry.

       +o The tab key will auto-complete whenever possible - accounts, descrip-
         tions,  dates  (yesterday,  today,  tomorrow).   If the input area is
         empty, it will insert the default value.

       +o If the journal defines a default commodity, it will be added  to  any
         bare numbers entered.

       +o A parenthesised transaction code may be entered following a date.

       +o Comments and tags may be entered following a description or amount.

       +o If  you make a mistake, enter < at any prompt to restart the transac-
         tion.

       +o Input prompts are displayed in a different colour when  the  terminal
         supports it.

       Example (see the tutorial for a detailed explanation):

              $ hledger add
              Adding transactions to journal file /src/hledger/data/sample.journal
              Any command line arguments will be used as defaults.
              Use tab key to complete, readline keys to edit, enter to accept defaults.
              An optional (CODE) may follow transaction dates.
              An optional ; COMMENT may follow descriptions or amounts.
              If you make a mistake, enter < at any prompt to restart the transaction.
              To end a transaction, enter . when prompted.
              To quit, enter . at a date prompt or press control-d or control-c.
              Date [2015/05/22]:
              Description: supermarket
              Account 1: expenses:food
              Amount  1: $10
              Account 2: assets:checking
              Amount  2 [$-10.0]:
              Account 3 (or . or enter to finish this transaction): .
              2015/05/22 supermarket
                  expenses:food             $10
                  assets:checking        $-10.0

              Save this transaction to the journal ? [y]:
              Saved.
              Starting the next transaction (. or ctrl-D/ctrl-C to quit)
              Date [2015/05/22]: <CTRL-D> $

   bbaallaannccee
       Show accounts and their balances.  Alias: bal.

       ----ttrreeee show short account names, as a tree

       ----ffllaatt show full account names, as a list (default)

       ----ddrroopp==NN
              in flat mode: omit N leading account name parts

       ----ffoorrmmaatt==LLIINNEEFFOORRMMAATT
              in single-column balance reports: use this custom line format

       ----nnoo--eelliiddee
              in tree mode: don't squash boring parent accounts

       --HH ----hhiissttoorriiccaall
              in multicolumn mode: show historical ending balances

       ----ccuummuullaattiivvee
              in multicolumn mode: show accumulated ending balances

       --AA ----aavveerraaggee
              in multicolumn mode: show a row average column

       --TT ----rrooww--ttoottaall
              in multicolumn mode: show a row total column

       --NN ----nnoo--ttoottaall
              don't show the final total row

       --VV ----vvaalluuee
              show amounts as their current market value in their default val-
              uation commodity

       --oo FFIILLEE[[..FFMMTT]] ----oouuttppuutt--ffiillee==FFIILLEE[[..FFMMTT]]
              write output to FILE instead of stdout.  A recognised FMT suffix
              influences the format.

       --OO FFMMTT ----oouuttppuutt--ffoorrmmaatt==FFMMTT
              select the output format.  Supported formats: txt, csv.

       The  balance  command  displays accounts and balances.  It is hledger's
       most featureful and most useful command.

              $ hledger balance
                               $-1  assets
                                $1    bank:saving
                               $-2    cash
                                $2  expenses
                                $1    food
                                $1    supplies
                               $-2  income
                               $-1    gifts
                               $-1    salary
                                $1  liabilities:debts
              --------------------
                                 0

       More precisely, the balance command shows the _c_h_a_n_g_e to each  account's
       balance caused by all (matched) postings.  In the common case where you
       do not filter by date and your journal sets the  correct  opening  bal-
       ances, this is the same as the account's ending balance.

       By  default,  accounts  are  displayed hierarchically, with subaccounts
       indented below their parent.  "Boring" accounts, which contain a single
       interesting subaccount and no balance of their own, are elided into the
       following line for more compact output.   (Use  --no-elide  to  prevent
       this.)

       Each  account's  balance  is  the "inclusive" balance - it includes the
       balances of any subaccounts.

       Accounts which have zero balance  (and  no  non-zero  subaccounts)  are
       omitted.  Use -E/--empty to show them.

              $ hledger balance -p 2008/6 expenses --no-total
                                $2  expenses
                                $1    food
                                $1    supplies

       A  final  total  is displayed by default; use -N/--no-total to suppress
       it.

   FFllaatt mmooddee
              $ hledger balance -p 2008/6 expenses -N --flat --drop 1
                                $1  food
                                $1  supplies

       To see a flat list of full account names instead of the default hierar-
       chical   display,   use   --flat.    In  this  mode,  accounts  (unless
       depth-clipped) show their "exclusive" balance, excluding any subaccount
       balances.   In  this  mode, you can also use --drop N to omit the first
       few account name components.

   DDeepptthh lliimmiittiinngg
              $ hledger balance -N --depth 1
                               $-1  assets
                                $2  expenses
                               $-2  income
                                $1  liabilities

       With --depth N, balance shows accounts only  to  the  specified  depth.
       This  is  very  useful  to  show  a  complex charts of accounts in less
       detail.  In flat mode, balances from accounts  below  the  depth  limit
       will be shown as part of a parent account at the depth limit.

   MMuullttiiccoolluummnn bbaallaannccee rreeppoorrttss
       With  a reporting interval, multiple balance columns will be shown, one
       for each report period.  There are three types of multi-column  balance
       report, showing different information:

              $ hledger balance --quarterly income expenses -E
              Balance changes in 2008:

                                 ||  2008q1  2008q2  2008q3  2008q4
              ===================++=================================
               expenses:food     ||       0      $1       0       0
               expenses:supplies ||       0      $1       0       0
               income:gifts      ||       0     $-1       0       0
               income:salary     ||     $-1       0       0       0
              -------------------++---------------------------------
                                 ||     $-1      $1       0       0

       1. By default: each column shows the sum of postings in that period, ie
          the account's change of balance in that period.  This is  useful  eg
          for a monthly income statement.

          $ hledger balance --quarterly income expenses -E --cumulative
          Ending balances (cumulative) in 2008:

                             ||  2008/03/31  2008/06/30  2008/09/30  2008/12/31
          ===================++=================================================
           expenses:food     ||           0          $1          $1          $1
           expenses:supplies ||           0          $1          $1          $1
           income:gifts      ||           0         $-1         $-1         $-1
           income:salary     ||         $-1         $-1         $-1         $-1
          -------------------++-------------------------------------------------
                             ||         $-1           0           0           0

       2. With  --cumulative:  each  column  shows the ending balance for that
          period, accumulating the changes across periods, starting from 0  at
          the report start date.  This mode is not often used.

          $ hledger balance ^assets ^liabilities -Q
          Balance changes in 2008:

                                ||  2008q1  2008q2  2008q3  2008q4
          ======================++=================================
           assets:bank:checking ||      $1       0       0     $-1
           assets:bank:saving   ||       0      $1       0       0
           assets:cash          ||       0     $-2       0       0
           liabilities:debts    ||       0       0       0      $1
          ----------------------++---------------------------------
                                ||      $1     $-1       0       0

          $ hledger balance ^assets ^liabilities --quarterly --historical --begin 2008/4/1
          Ending balances (historical) in 2008/04/01-2008/12/31:

                                ||  2008/06/30  2008/09/30  2008/12/31
          ======================++=====================================
           assets:bank:checking ||          $1          $1           0
           assets:bank:saving   ||          $1          $1          $1
           assets:cash          ||         $-2         $-2         $-2
           liabilities:debts    ||           0           0          $1
          ----------------------++-------------------------------------
                                ||           0           0           0

       3. With --historical/-H: each column shows the actual historical ending
          balance for that period, accumulating the  changes  across  periods,
          starting  from the actual balance at the report start date.  This is
          useful eg for a multi-period balance sheet, and when you are showing
          only the data after a certain start date.

          $ hledger balance -Q income expenses --tree -E -TA
          Balance changes in 2008:

                      ||  2008q1  2008q2  2008q3  2008q4    Total  Average
          ============++===================================================
           expenses   ||       0      $2       0       0       $2       $1
             food     ||       0      $1       0       0       $1        0
             supplies ||       0      $1       0       0       $1        0
           income     ||     $-1     $-1       0       0      $-2      $-1
             gifts    ||       0     $-1       0       0      $-1        0
             salary   ||     $-1       0       0       0      $-1        0
          ------------++---------------------------------------------------
                      ||     $-1      $1       0       0        0        0

          # Average is rounded to the dollar here since all journal amounts are

       Multi-column  balance reports display accounts in flat mode by default;
       to see the hierarchy, use --tree.

       Note that with a reporting interval, the report start/end dates will be
       "enlarged"  if  necessary  so  that they encompass the displayed report
       periods.  This is so that the first and last periods will be "full" and
       comparable to the others.

       The  -E/--empty  flag does two things here: first, the report will show
       all columns within the specified report period (without -E, leading and
       trailing  columns with all zeroes are not shown).  Second, all accounts
       which existed at the report start date will be considered, not just the
       ones  with  activity  during  the  report  period  (use  -E  to include
       low-activity accounts which would otherwise would be omitted).

       The -T/--row-total flag adds an additional column showing the total for
       each  row.   The  -A/--average  flag  adds a column showing the average
       value in each row.  Note in --H/--historical mode only the  average  is
       useful, and in --cumulative mode neither is useful.

   MMaarrkkeett vvaalluuee
       The -V/--value flag converts all the reported amounts to their "current
       market value" using their default market price.   That  is  the  latest
       market  price (P directive) found in the journal (or an included file),
       for the amount's commodity, dated on or before the report end date.

       Unlike Ledger, hledger's -V only uses the market prices recorded with P
       directives,  ignoring  transaction  prices  recorded as part of posting
       amounts (which -B/--cost uses).  Using -B and -V together is allowed.

   CCuussttoomm bbaallaannccee oouuttppuutt
              $ hledger balance --format "%20(account) %12(total)"
                            assets          $-1
                       bank:saving           $1
                              cash          $-2
                          expenses           $2
                              food           $1
                          supplies           $1
                            income          $-2
                             gifts          $-1
                            salary          $-1
                 liabilities:debts           $1
              ---------------------------------
                                              0

       In simple (non-multi-column) balance reports,  you  can  customise  the
       output  with  --format FMT.  FMT (plus a newline) will be displayed for
       each account/balance pair.  It is a  format  string  with  data  fields
       interpolated by

       %[MIN][.MAX](FIELDNAME)

       where  MIN  means pad with spaces to at least this width, and MAX means
       truncate at this width.  The field name must be enclosed  in  parenthe-
       ses.  Three fields are available:

       +o depth_spacer - a number of spaces equal to the account's depth, or if
         MIN is specified, MIN * depth spaces.

       +o account - the account's name

       +o total - the account's balance/posted total, right justified

       When the total has multiple commodities, by default each  commodity  is
       displayed  on  a  separate  line,  and  the  report item will be bottom
       aligned.  You can change how such multi-line  values  are  rendered  by
       beginning the format with a special prefix:

       +o %_ - render on multiple lines, bottom-aligned (the default)

       +o %^ - render on multiple lines, top-aligned

       +o %, - render on one line, with multi-line values comma-separated

       There  are some quirks, and experimentation may be needed to get pleas-
       ing output.  In one-line mode, %(depth_spacer) has no  effect,  instead
       %(account) has indentation built in.

       Examples:

       +o %(total) - the account's total

       +o %-20.20(account)  -  the account's name, left justified, padded to 20
         characters and clipped at 20 characters

       +o %20(total)  %2(depth_spacer)%-(account) - default format for the sin-
         gle-column balance report

       +o %,%-50(account)  %25(total)  -  account name padded to 50 characters,
         total padded to 20 characters, with multiple commodities rendered  on
         one line

   OOuuttppuutt ddeessttiinnaattiioonn
              $ hledger balance -o -     # write to stdout (the default)
              $ hledger balance -o FILE  # write to FILE

       The  balance, print, register and stats commands can write their output
       to a destination other than the console.  This  is  controlled  by  the
       -o/--output-file option.

   CCSSVV oouuttppuutt
              $ hledger balance -O csv       # write CSV to stdout
              $ hledger balance -o FILE.csv  # write CSV to FILE.csv

       The balance, print and register commands can write their output as CSV.
       This is useful for exporting data to other  applications,  eg  to  make
       charts  in a spreadsheet.  This is controlled by the -O/--output-format
       option, or by specifying a .csv file extension with -o/--output-file.

   bbaallaanncceesshheeeett
       Show a balance sheet.  Alias: bs.

       ----ffllaatt show full account names, as a list (default)

       ----ddrroopp==NN
              in flat mode: omit N leading account name parts

       This command displays a simple balance  sheet.   It  currently  assumes
       that  you  have  top-level  accounts  named asset and liability (plural
       forms also allowed.)

              $ hledger balancesheet
              Balance Sheet

              Assets:
                               $-1  assets
                                $1    bank:saving
                               $-2    cash
              --------------------
                               $-1

              Liabilities:
                                $1  liabilities:debts
              --------------------
                                $1

              Total:
              --------------------
                                 0

   ccaasshhffllooww
       Show a cashflow statement.  Alias: cf.

       ----ffllaatt show full account names, as a list (default)

       ----ddrroopp==NN
              in flat mode: omit N leading account name parts

       This command displays a simple cashflow statement It shows  the  change
       in  all  "cash"  (ie,  liquid assets) accounts for the period.  It cur-
       rently assumes that cash accounts are under a top-level  account  named
       asset and do not contain receivable or A/R (plural forms also allowed.)

              $ hledger cashflow
              Cashflow Statement

              Cash flows:
                               $-1  assets
                                $1    bank:saving
                               $-2    cash
              --------------------
                               $-1

              Total:
              --------------------
                               $-1

   iinnccoommeessttaatteemmeenntt
       Show an income statement.  Alias: is.

       ----ffllaatt show full account names, as a list (default)

       ----ddrroopp==NN
              in flat mode: omit N leading account name parts

       This command displays a simple income statement.  It currently  assumes
       that  you have top-level accounts named income (or revenue) and expense
       (plural forms also allowed.)

              $ hledger incomestatement
              Income Statement

              Revenues:
                               $-2  income
                               $-1    gifts
                               $-1    salary
              --------------------
                               $-2

              Expenses:
                                $2  expenses
                                $1    food
                                $1    supplies
              --------------------
                                $2

              Total:
              --------------------
                                 0

   pprriinntt
       Show transactions from the journal.

       --mm SSTTRR ----mmaattcchh==SSTTRR
              show the transaction whose description is most similar  to  STR,
              and is most recent

       --oo FFIILLEE[[..FFMMTT]] ----oouuttppuutt--ffiillee==FFIILLEE[[..FFMMTT]]
              write output to FILE instead of stdout.  A recognised FMT suffix
              influences the format.

       --OO FFMMTT ----oouuttppuutt--ffoorrmmaatt==FFMMTT
              select the output format.  Supported formats: txt, csv.

       The print command displays full transactions  from  the  journal  file,
       tidily  formatted  and  showing  all amounts explicitly.  The output of
       print is always a valid hledger journal, but it does  always  not  pre-
       serve all original content exactly (eg directives).

       hledger's  print command also shows all unit prices in effect, or (with
       -B/--cost) shows cost amounts.

       The print command also supports output destination and CSV output.

              $ hledger print
              2008/01/01 income
                  assets:bank:checking            $1
                  income:salary                  $-1

              2008/06/01 gift
                  assets:bank:checking            $1
                  income:gifts                   $-1

              2008/06/02 save
                  assets:bank:saving              $1
                  assets:bank:checking           $-1

              2008/06/03 * eat & shop
                  expenses:food                $1
                  expenses:supplies            $1
                  assets:cash                 $-2

              2008/12/31 * pay off
                  liabilities:debts               $1
                  assets:bank:checking           $-1

   rreeggiisstteerr
       Show postings and their running total.  Alias: reg.

       --HH ----hhiissttoorriiccaall
              include prior postings in the running total

       --AA ----aavveerraaggee
              show a running average instead of  the  running  total  (implies
              --empty)

       --rr ----rreellaatteedd
              show postings' siblings instead

       --ww NN ----wwiiddtthh==NN
              set  output  width  (default:  terminal width or COLUMNS.  -wN,M
              sets description width as well)

       --oo FFIILLEE[[..FFMMTT]] ----oouuttppuutt--ffiillee==FFIILLEE[[..FFMMTT]]
              write output to FILE instead of stdout.  A recognised FMT suffix
              influences the format.

       --OO FFMMTT ----oouuttppuutt--ffoorrmmaatt==FFMMTT
              select the output format.  Supported formats: txt, csv.

              $ hledger register checking
              2008/01/01 income               assets:bank:checking            $1            $1
              2008/06/01 gift                 assets:bank:checking            $1            $2
              2008/06/02 save                 assets:bank:checking           $-1            $1
              2008/12/31 pay off              assets:bank:checking           $-1             0

       The register command displays postings, one per line, and their running
       total.  This is typically used with  a  query  selecting  a  particular
       account, to see that account's activity.

              $ hledger register checking -b 2008/6 --historical
              2008/06/01 gift                 assets:bank:checking            $1            $2
              2008/06/02 save                 assets:bank:checking           $-1            $1
              2008/12/31 pay off              assets:bank:checking           $-1             0

       The  --historical/-H  flag  adds the balance from any prior postings to
       the running total, to show the actual historical running balance.  This
       is useful when you want to see just the recent activity.

       The --depth option limits the amount of sub-account detail displayed.

       The  --average/-A flag shows the running average posting amount instead
       of the running total (so, the final number displayed is the average for
       the  whole  report period).  This flag implies --empty (see below).  It
       works best when showing just one account and one commodity.

       The --related/-r flag shows the _o_t_h_e_r postings in the  transactions  of
       the postings which would normally be shown.

              $ hledger register --monthly income
              2008/01                 income:salary                          $-1           $-1
              2008/06                 income:gifts                           $-1           $-2

              $ hledger register --monthly income -E
              2008/01                 income:salary                          $-1           $-1
              2008/02                                                          0           $-1
              2008/03                                                          0           $-1
              2008/04                                                          0           $-1
              2008/05                                                          0           $-1
              2008/06                 income:gifts                           $-1           $-2
              2008/07                                                          0           $-2
              2008/08                                                          0           $-2
              2008/09                                                          0           $-2
              2008/10                                                          0           $-2
              2008/11                                                          0           $-2
              2008/12                                                          0           $-2

              $ hledger register --monthly assets --depth 1  # cashflow (changes to assets) by month
              2008/01                 assets                                  $1            $1
              2008/06                 assets                                 $-1             0
              2008/12                 assets                                 $-1           $-1

       With  a  reporting  interval,  register shows summary postings, one per
       interval, aggregating the postings to each account.

       Periods with no activity, and summary postings with a zero amount,  are
       not shown by default; use the --empty/-E flag to see them.

       Often,  you'll  want  to  see  just one line per interval.  The --depth
       option helps with this, causing subaccounts to be aggregated.

       Note when using report intervals, if you specify start/end dates  these
       will  be  adjusted  outward  if  necessary to contain a whole number of
       intervals.  This ensures that the first and  last  intervals  are  full
       length and comparable to the others in the report.

   CCuussttoomm rreeggiisstteerr oouuttppuutt
       register  uses  the  full terminal width by default, except on windows.
       You can override this by setting the COLUMNS environment variable  (not
       a bash shell variable) or by using the --width/-w option.

       The  description  and  account columns normally share the space equally
       (about half of (width - 40) each).  You can adjust  this  by  adding  a
       description  width  as  part  of  --width's  argument, comma-separated:
       --width W,D .  Here's a diagram:

              <--------------------------------- width (W) ---------------------------------->
              date (10)  description (D)       account (W-41-D)     amount (12)   balance (12)
              DDDDDDDDDD dddddddddddddddddddd  aaaaaaaaaaaaaaaaaaa  AAAAAAAAAAAA  AAAAAAAAAAAA

       and some examples:

              $ hledger reg                 # use terminal width (or 80 on windows)
              $ hledger reg -w 100          # use width 100
              $ COLUMNS=100 hledger reg     # set with one-time environment variable
              $ export COLUMNS=100; hledger reg  # set till session end (or window resize)
              $ hledger reg -w 100,40       # set overall width 100, description width 40
              $ hledger reg -w $COLUMNS,40  # use terminal width, and set description width

       The register command also supports the -o/--output-file  and  -O/--out-
       put-format options for controlling output destination and CSV output.

   ssttaattss
       Show some journal statistics.

       --oo FFIILLEE[[..FFMMTT]] ----oouuttppuutt--ffiillee==FFIILLEE[[..FFMMTT]]
              write output to FILE instead of stdout.  A recognised FMT suffix
              influences the format.

              $ hledger stats
              Main journal file        : /src/hledger/data/sample.journal
              Included journal files   :
              Transactions span        : 2008-01-01 to 2009-01-01 (366 days)
              Last transaction         : 2008-12-31 (2333 days ago)
              Transactions             : 5 (0.0 per day)
              Transactions last 30 days: 0 (0.0 per day)
              Transactions last 7 days : 0 (0.0 per day)
              Payees/descriptions      : 5
              Accounts                 : 8 (depth 3)
              Commodities              : 1 ($)

       The stats command displays summary information for the  whole  journal,
       or  a matched part of it.  With a reporting interval, it shows a report
       for each report period.

       The stats command also supports -o/--output-file for controlling output
       destination.

   tteesstt
       Run built-in unit tests.

              $ hledger test
              Cases: 74  Tried: 74  Errors: 0  Failures: 0

       This  command  runs  hledger's built-in unit tests and displays a quick
       report.  With a regular expression argument, it selects only tests with
       matching names.  It's mainly used in development, but it's also nice to
       be able to check your hledger executable for smoke at any time.

AADDDD--OONN CCOOMMMMAANNDDSS
       Add-on commands are executables in your PATH  whose  name  starts  with
       hledger-   and   ends   with   any  of  these  file  extensions:  none,
       .hs,.lhs,.pl,.py,.rb,.rkt,.sh,.bat,.com,.exe.  Also, an  add-on's  name
       may not be the same as any built-in command or alias.

       hledger  will detect these and include them in the command list and let
       you invoke them with hledger ADDONCMD.  However there are some  limita-
       tions:

       +o Options appearing before ADDONCMD will be visible only to hledger and
         will not be passed  to  the  add-on.   Eg:  hledger --help web  shows
         hledger's help, hledger web --help shows hledger-web's help.

       +o Options  understood only by the add-on must go after a -- argument to
         hide them from hledger,  which  would  otherwise  reject  them.   Eg:
         hledger web -- --server.

       Sometimes  it  may  be more convenient to just run the add-on directly,
       eg: hledger-web --server.

       Add-ons which  are  written  in  haskell  can  take  advantage  of  the
       hledger-lib   library  for  journal  parsing,  reporting,  command-line
       options, etc.

       Here are some hledger add-ons available from Hackage, the extra  direc-
       tory in the hledger source, or elsewhere:

   aappii
       Web API server, see hledger-api.

   aauuttoossyynncc
       Download OFX bank data and/or convert OFX to hledger journal format.

              $ hledger autosync --help
              usage: hledger-autosync [-h] [-m MAX] [-r] [-a ACCOUNT] [-l LEDGER] [-i INDENT]
                                      [--initial] [--fid FID] [--assertions] [-d] [--hledger]
                                      [--slow] [--which]
                                      [PATH]

              Synchronize ledger.

              positional arguments:
                PATH                  do not sync; import from OFX file

              optional arguments:
                -h, --help            show this help message and exit
                -m MAX, --max MAX     maximum number of days to process
                -r, --resync          do not stop until max days reached
                -a ACCOUNT, --account ACCOUNT
                                      set account name for import
                -l LEDGER, --ledger LEDGER
                                      specify ledger file to READ for syncing
                -i INDENT, --indent INDENT
                                      number of spaces to use for indentation
                --initial             create initial balance entries
                --fid FID             pass in fid value for OFX files that do not supply it
                --assertions          create balance assertion entries
                -d, --debug           enable debug logging
                --hledger             force use of hledger (on by default if invoked as hledger-
                                      autosync)
                --slow                use slow, but possibly more robust, method of calling ledger
                                      (no subprocess)
                --which               display which version of ledger/hledger/ledger-python will
                                      be used by ledger-autosync to check for previous
                                      transactions
              $ head acct1.ofx
              OFXHEADER:100
              DATA:OFXSGML
              VERSION:102
              SECURITY:NONE
              ENCODING:USASCII
              CHARSET:1252
              COMPRESSION:NONE
              OLDFILEUID:NONE
              NEWFILEUIDe:8509488b59d1bb45

              $ hledger autosync acct1.ofx
              2013/08/30 MONTHLY SERVICE FEE
                  ; ofxid: 3000.4303001832.201308301
                  WF:4303001832                               -$6.00
                  [assets:business:bank:wf:bchecking:banking]  $6.00

       ledger-autosync,  which  includes  a  hledger-autosync alias, downloads
       transactions from your bank(s) via OFX, and prints just the new ones as
       journal entries which you can add to your journal.  It can also operate
       on .OFX files which you've downloaded  manually.   It  can  be  a  nice
       alternative  to  hledger's built-in CSV reader, especially if your bank
       supports OFX download.

   ddiiffff
       Show transactions present in one journal file but not another

              $ hledger diff --help
              Usage: hledger-diff account:name left.journal right.journal
              $ cat a.journal
              1/1
               (acct:one)  1

              $ cat b.journal
              1/1
               (acct:one)  1
              2/2
               (acct:two)  2

              $ hledger diff acct:two a.journal b.journal
              Unmatched transactions in the first journal:

              Unmatched transactions in the second journal:

              2015/02/02
                  (acct:two)            $2

       hledger-diff compares two journal files.  Given  an  account  name,  it
       prints  out  the  transactions  affecting that account which are in one
       journal file but not in the other.  This can be useful for  reconciling
       existing journals with bank statements.

   eeqquuiittyy
       Print a journal entry that resets account balances to zero.

              $ hledger balance --flat -E assets liabilities
                                 0  assets:bank:checking
                                $1  assets:bank:saving
                               $-2  assets:cash
                                $1  liabilities:debts
              --------------------
                                 0
              $ hledger equity assets liabilities
              2015/05/23
                  assets:bank:saving                $-1
                  assets:cash                        $2
                  liabilities:debts                 $-1
                  equity:closing balances             0

              2015/05/23
                  assets:bank:saving                 $1
                  assets:cash                       $-2
                  liabilities:debts                  $1
                  equity:opening balances             0

       This prints a journal entry which zeroes out the specified accounts (or
       all accounts) with a transfer to/from "equity:closing  balances"  (like
       Ledger's  equity command).  Also, it prints an similar entry with oppo-
       site sign for restoring the balances from "equity:opening balances".

       These can be useful for ending one journal file and starting a new one,
       respectively.   By zeroing your asset and liability accounts at the end
       of a file and restoring them at the start of the next one, you will see
       correct  asset/liability  balances  whether you run hledger on just one
       file, or on several files concatenated with include.

   iinntteerreesstt
       Generate interest transactions.

              $ hledger interest --help
              Usage: hledger-interest [OPTION...] ACCOUNT
                -h          --help            print this message and exit
                -V          --version         show version number and exit
                -v          --verbose         echo input ledger to stdout (default)
                -q          --quiet           don't echo input ledger to stdout
                            --today           compute interest up until today
                -f FILE     --file=FILE       input ledger file (pass '-' for stdin)
                -s ACCOUNT  --source=ACCOUNT  interest source account
                -t ACCOUNT  --target=ACCOUNT  interest target account
                            --act             use 'act' day counting convention
                            --30-360          use '30/360' day counting convention
                            --30E-360         use '30E/360' day counting convention
                            --30E-360isda     use '30E/360isda' day counting convention
                            --constant=RATE   constant interest rate
                            --annual=RATE     annual interest rate
                            --bgb288          compute interest according to German BGB288
                            --ing-diba        compute interest according for Ing-Diba Tagesgeld account

              $ cat interest.journal
              2008/09/26 Loan
                   Assets:Bank          EUR 10000.00
                   Liabilities:Bank

              2008/11/27 Payment
                   Assets:Bank          EUR -3771.12
                   Liabilities:Bank

              2009/05/03 Payment
                   Assets:Bank          EUR -1200.00
                   Liabilities:Bank

              2010/12/10 Payment
                   Assets:Bank          EUR -3700.00
                   Liabilities:Bank

              $ hledger interest -- -f interest.journal --source=Expenses:Interest \
                  --target=Liabilities:Bank --30-360 --annual=0.05 Liabilities:Bank
              2008/09/26 Loan
                  Assets:Bank       EUR 10000.00
                  Liabilities:Bank  EUR -10000.00

              2008/11/27 0.05% interest for EUR -10000.00 over 61 days
                  Liabilities:Bank     EUR -84.72
                  Expenses:Interest     EUR 84.72

              2008/11/27 Payment
                  Assets:Bank       EUR -3771.12
                  Liabilities:Bank   EUR 3771.12

              2008/12/31 0.05% interest for EUR -6313.60 over 34 days
                  Liabilities:Bank     EUR -29.81
                  Expenses:Interest     EUR 29.81

              2009/05/03 0.05% interest for EUR -6343.42 over 123 days
                  Liabilities:Bank    EUR -108.37
                  Expenses:Interest    EUR 108.37

              2009/05/03 Payment
                  Assets:Bank       EUR -1200.00
                  Liabilities:Bank   EUR 1200.00

              2009/12/31 0.05% interest for EUR -5251.78 over 238 days
                  Liabilities:Bank    EUR -173.60
                  Expenses:Interest    EUR 173.60

              2010/12/10 0.05% interest for EUR -5425.38 over 340 days
                  Liabilities:Bank    EUR -256.20
                  Expenses:Interest    EUR 256.20

              2010/12/10 Payment
                  Assets:Bank       EUR -3700.00
                  Liabilities:Bank   EUR 3700.00

       hledger-interest computes interests for a given account.  Using command
       line  flags,  the  program can be configured to use various schemes for
       day-counting, such as act/act, 30/360, 30E/360, and  30/360isda.   Fur-
       thermore,  it  supports  a  (small)  number  of  interest schemes, i.e.
       annual interest with a fixed rate and the scheme mandated by the German
       BGB288  (Basiszins f~A1/4r Verbrauchergesch~Aoxfte).  See the package page
       for more.

   iirrrr
       Calculate internal rate of return.

              $ hledger irr --help
              Usage: hledger-irr [OPTION...]
                -h          --help                        print this message and exit
                -V          --version                     show version number and exit
                -c          --cashflow                    also show all revant transactions
                -f FILE     --file=FILE                   input ledger file (pass '-' for stdin)
                -i ACCOUNT  --investment-account=ACCOUNT  investment account
                -t ACCOUNT  --interest-account=ACCOUNT    interest/gain/fees/losses account
                -b DATE     --begin=DATE                  calculate interest from this date
                -e DATE     --end=DATE                    calculate interest until this date
                -D          --daily                       calculate interest for each day
                -W          --weekly                      calculate interest for each week
                -M          --monthly                     calculate interest for each month
                -Y          --yearly                      calculate interest for each year

              $ cat irr.journal
              2011-01-01 Some wild speculation - I wonder if it pays off
                 Speculation   ^a~100.00
                 Cash

              2011-02-01 More speculation (and adjustment of value)
                 Cash         -^a~10.00
                 Rate Gain     -^a~1.00
                 Speculation

              2011-03-01 Lets pull out some money (and adjustment of value)
                 Cash          ^a~30.00
                 Rate Gain     -^a~3.00
                 Speculation

              2011-04-01 More speculation (and it lost some money!)
                 Cash         -^a~50.00
                 Rate Gain     ^a~ 5.00
                 Speculation

              2011-05-01 Getting some money out (and adjustment of value)
                 Speculation  -^a~44.00
                 Rate Gain    -^a~ 3.00
                 Cash

              2011-06-01 Emptying the account (after adjusting the value)
                 Speculation   -^a~85.00
                 Cash           ^a~90.00
                 Rate Gain     -^a~ 5.00

              $ hledger-irr -f irr.journal -t "Rate Gain" -i Speculation  --monthly
              2011/01/01 - 2011/02/01: 12.49%
              2011/02/01 - 2011/03/01: 41.55%
              2011/03/01 - 2011/04/01: -51.44%
              2011/04/01 - 2011/05/01: 32.24%
              2011/05/01 - 2011/06/01: 95.92%

       hledger-irr computes the internal rate of return,  also  known  as  the
       effective  interest rate, of a given investment.  After specifying what
       account holds the investment, and what account  stores  the  gains  (or
       losses,  or  fees, or cost), it calculates the hypothetical annual rate
       of fixed rate investment that would have provided the exact  same  cash
       flow.  See the package page for more.

   pprriinntt--uunniiqquuee
       Print only only journal entries which have a unique description.

              $ cat unique.journal
              1/1 test
               (acct:one)  1
              2/2 test
               (acct:two)  2
              $ LEDGER_FILE=unique.journal hledger print-unique
              (-f option not supported)
              2015/01/01 test
                  (acct:one)             1

   rreewwrriittee
       Prints all journal entries, adding specified custom postings to matched
       entries.

              $ hledger rewrite -- [QUERY]        --add-posting "ACCT  AMTEXPR" ...
              $ hledger rewrite -- ^income        --add-posting '(liabilities:tax)  *.33'
              $ hledger rewrite -- expenses:gifts --add-posting '(budget:gifts)  *-1"'

   uuii
       Curses-style interface, see hledger-ui.

   wweebb
       Web interface, see hledger-web.

TTRROOUUBBLLEESSHHOOOOTTIINNGG
   RRuunn--ttiimmee pprroobblleemmss
       Here are some issues you might encounter  when  you  run  hledger  (and
       remember  you can also seek help from the IRC channel, mail list or bug
       tracker):

       SSuucccceessssffuullllyy iinnssttaalllleedd,, bbuutt ""NNoo ccoommmmaanndd ''hhlleeddggeerr'' ffoouunndd""
       stack and cabal install binaries into a special directory, which should
       be  added  to your PATH environment variable.  Eg on unix-like systems,
       that is ~/.local/bin and ~/.cabal/bin respectively.

       II sseett aa ccuussttoomm LLEEDDGGEERR__FFIILLEE,, bbuutt hhlleeddggeerr iiss ssttiillll uussiinngg tthhee ddeeffaauulltt ffiillee
       LEDGER_FILE  should  be  a  real environment variable, not just a shell
       variable.  The command env | grep LEDGER_FILE should show it.  You  may
       need to use export.  Here's an explanation.

       ""IIlllleeggaall  bbyyttee  sseeqquueennccee""  oorr  ""IInnvvaalliidd oorr iinnccoommpplleettee mmuullttiibbyyttee oorr wwiiddee
       cchhaarraacctteerr"" eerrrroorrss
       In order to handle non-ascii letters and  symbols  (like  ^A-L),  hledger
       needs  an  appropriate locale.  This is usually configured system-wide;
       you can also configure it temporarily.  The locale may need to  be  one
       that  supports  UTF-8, if you built hledger with GHC < 7.2 (or possibly
       always, I'm not sure yet).

       Here's  an  example  of  setting  the  locale  temporarily,  on  ubuntu
       gnu/linux:

              $ file my.journal
              my.journal: UTF-8 Unicode text                 # <- the file is UTF8-encoded
              $ locale -a
              C
              en_US.utf8                             # <- a UTF8-aware locale is available
              POSIX
              $ LANG=en_US.utf8 hledger -f my.journal print   # <- use it for this command

       Here's one way to set it permanently, there are probably better ways:

              $ echo "export LANG=en_US.UTF-8" >>~/.bash_profile
              $ bash --login

       If  we  preferred  to  use eg fr_FR.utf8, we might have to install that
       first:

              $ apt-get install language-pack-fr
              $ locale -a
              C
              en_US.utf8
              fr_BE.utf8
              fr_CA.utf8
              fr_CH.utf8
              fr_FR.utf8
              fr_LU.utf8
              POSIX
              $ LANG=fr_FR.utf8 hledger -f my.journal print

       Note some platforms allow variant locale spellings, but not all (ubuntu
       accepts fr_FR.UTF8, mac osx requires exactly fr_FR.UTF-8).

   KKnnoowwnn lliimmiittaattiioonnss
       CCoommmmaanndd lliinnee iinntteerrffaaccee

       Add-on  command  options,  unless  they are also understood by the main
       hledger  executable,   must   be   written   after   --,   like   this:
       hledger web -- --server

       DDiiffffeerreenncceess ffrroomm LLeeddggeerr

       Not  all of Ledger's journal file syntax is supported.  See file format
       differences.

       hledger is slower than Ledger, and uses  more  memory,  on  large  data
       files.

       WWiinnddoowwss lliimmiittaattiioonnss

       In  a windows CMD window, non-ascii characters and colours are not sup-
       ported.

       In a windows Cygwin/MSYS/Mintty window, the tab key is not supported in
       hledger add.

EENNVVIIRROONNMMEENNTT
       LLEEDDGGEERR__FFIILLEE  sets  the  default  journal  file path.  If not set, it is
       ~/.hledger.journal.

       CCOOLLUUMMNNSS sets the default width used by the register  command  (normally
       the full terminal width).

FFIILLEESS
       Reads   data   from   a   hledger   journal   file   ($LEDGER_FILE   or
       ~/.hledger.journal by default), or a CSV file plus associated CSV rules
       file.

BBUUGGSS
       The  need  to precede options with -- when invoked from hledger is awk-
       ward.

       hledger can't render non-ascii characters when run from a Windows  com-
       mand prompt (up to Windows 7 at least).

       When input data contains non-ascii characters, a suitable system locale
       must be configured (or there will be an unhelpful error).  Eg on POSIX,
       set LANG to something other than C.



RREEPPOORRTTIINNGG BBUUGGSS
       Report  bugs at http://bugs.hledger.org (or on the #hledger IRC channel
       or hledger mail list)


AAUUTTHHOORRSS
       Simon Michael <simon@joyful.com> and contributors


CCOOPPYYRRIIGGHHTT
       Copyright (C) 2007-2016 Simon Michael.
       Released under GNU GPL v3 or later.


SSEEEE AALLSSOO
       hledger(1),     hledger-ui(1),     hledger-web(1),      hledger-api(1),
       hledger_csv(5), hledger_journal(5), hledger_timeclock(5), hledger_time-
       dot(5), ledger(1)

       http://hledger.org



hledger 0.27.98                   April 2016                        hledger(1)
