# The main hledger integration test workflow.
# Builds warning free and runs unit/doc/functional/haddock/bench tests,
# using the GHC version(s) enabled below.
# It also uploads the binaries as a downloadable artifact for testers,
# and because why not having done all the work.
# Merging to master requires that this workflow's jobs ("86" at least) have passed.

name: test-linux-x64

# This workflow runs...
on:
  # On master, when manually triggered.
  workflow_dispatch:

  # On master, on this schedule:
  # schedule:
  # - cron: "0 07 * * 0"  # sunday midnight pacific

  # On these dev branches, when pushed.
  # To avoid double workflow execution, don't use these branches for pull requests.
  # (https://github.community/t/how-to-trigger-an-action-on-push-or-pull-request-but-not-both/16662/2)
  push:
    branches: [ simon, simon2 ]

  # On pull request branches against these branches, when pushed.
  pull_request:
    branches: [ master ]
    # Uncomment to run it only for changes to these paths: (but that could prevent merging)
    # paths:
    #   - '.github/workflows/pushpull.yml'
    #   - 'stack*.yaml'
    #   - 'hledger-lib/**'
    #   - 'hledger/**'
    #   - 'hledger-ui/**'
    #   - 'hledger-web/**'
    #   - 'bin/*.hs'
    #   - 'examples/**'
    # Or to ignore certain paths:
    #   # examples
    #   - '!**.journal'
    #   - '!**.j'
    #   - '!**.ledger'
    #   - '!**.csv'
    #   # docs
    #   - '!**.m4'
    #   - '!**.md'
    #   - '!**.1'
    #   - '!**.5'
    #   - '!**.info'
    #   - '!**.txt'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        plan:  # at least the check(s) required by master should be enabled
        - { ghc: "810", stack: "stack --stack-yaml=stack8.10.yaml" }  # oldest supported ghc
        # - { ghc: "90" , stack: "stack --stack-yaml=stack.yaml" }
        # - { ghc: "92" , stack: "stack --stack-yaml=stack9.2.yaml" }  # newest supported ghc

    steps:

    - name: Check out
      uses: actions/checkout@v3
      # have to fetch everything for git describe for --version
      with: 
        fetch-depth: 0

    - name: Print debug output
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo $GITHUB_CONTEXT
    #     echo "$GITHUB_SHA"
    #     echo "$GITHUB_REF"
    #     echo "$GITHUB_HEAD_REF"
    #     echo "$GITHUB_BASE_REF"
    #     git log "$GITHUB_BASE_REF"..
    #     tools/commitlint "$GITHUB_BASE_REF"..

    # keep synced in all workflows which do this
    - name: Check commit messages
      # For a PR, the range will be: master..origin/$GITHUB_HEAD_REF
      # For a push it will be: $BEFORE..
      # For a force push, BEFORE is the previous HEAD, and on github (though not locally) this is an "invalid revision range".
      # In this and any case where the range is invalid, we'll just skip the check, to avoid false positives
      # related: https://stackoverflow.com/questions/64708371/how-to-run-github-workflow-on-every-commit-of-a-push
      env:
        BEFORE: ${{ github.event.before }}
        # NUM:    5
      shell: bash
      run: |
        RANGE=${BEFORE:-origin/master}..${GITHUB_HEAD_REF:-}

        echo "debug: last 10 commits:"
        echo "$(git log --format='%h -%d %s (%an, %ci)' -10)"
        echo "debug: origin/master:"
        echo "$(git log --format='%h -%d %s (%an, %ci)' -1 origin/master)"
        echo "debug: BEFORE=$BEFORE"
        echo "$(git log --format='%h -%d %s (%an, %ci)' -1 $BEFORE)"
        echo "debug: GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
        echo "$(git log --format='%h -%d %s (%an, %ci)' -1 $GITHUB_HEAD_REF)"
        echo "debug: RANGE=$RANGE"
        echo "debug: commits to check:"
        echo "$(git log --format='%h -%d %s (%an, %ci)' --abbrev-commit --date=relative --date-order $RANGE)"

        if git rev-list --quiet $RANGE
        then tools/commitlint $RANGE
        else echo "could not identify commits, not checking them"
          # echo "could not identify commits, checking last $NUM instead:"
          # tools/commitlint -$NUM
        fi

    - name: Skip remaining steps if last commit message begins with ;
      shell: bash
      run: |
        echo "git log -1 --pretty='%s' ${GITHUB_HEAD_REF:+origin/$GITHUB_HEAD_REF} >> $$.gitlog"
        (git log -1 --pretty='%s' ${GITHUB_HEAD_REF:+origin/$GITHUB_HEAD_REF} >> $$.gitlog \
          && (grep -qE '^ *;' $$.gitlog || echo "CONTINUE=true" >> $GITHUB_ENV)) \
          || ( echo "could not identify commit range, continuing CI steps"; echo "CONTINUE=true" >> $GITHUB_ENV )

    # things to be cached/restored:

    - name: Cache stack global package db
      id:   stack-global
      uses: actions/cache@v3
      with:
        path: ~/.stack
        # XXX if stack.yaml is a symlink, this fails with
        #  Error: The template is not valid. .github/workflows/push.yml (Line: 103, Col: 14): hashFiles('**.yaml') failed. 
        #  Fail to hash files under directory '/home/runner/work/hledger/hledger'
        key: ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache stack-installed programs in ~/.local/bin
      id:   stack-programs
      uses: actions/cache@v3
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache .stack-work
      uses: actions/cache@v3
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger-lib/.stack-work
      uses: actions/cache@v3
      with:
        path: hledger-lib/.stack-work
        key: ${{ runner.os }}-hledger-lib-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger-lib/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-lib-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger/.stack-work
      uses: actions/cache@v3
      with:
        path: hledger/.stack-work
        key: ${{ runner.os }}-hledger-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger-ui/.stack-work
      uses: actions/cache@v3
      with:
        path: hledger-ui/.stack-work
        key: ${{ runner.os }}-hledger-ui-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger-ui/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-ui-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger-web/.stack-work
      uses: actions/cache@v3
      with:
        path: hledger-web/.stack-work
        key: ${{ runner.os }}-hledger-web-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger-web/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-web-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    # actions:

    - name: Install stack
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH
        # curl -sL https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack
        if [[ ! -x ~/.local/bin/stack ]]; then curl -sL https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack; fi
        stack --version
      if: env.CONTINUE

    - name: Install GHC
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack setup --install-ghc
      if: env.CONTINUE

    - name: Install haskell deps
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack build --test --bench --only-dependencies --dry-run
        $stack build --test --bench --only-dependencies
      if: env.CONTINUE

    # - name: Build all hledger modules warning free, optimised and minimised, run unit/doc/bench tests
    #   env:
    #     stack: ${{ matrix.plan.stack }}
    #   run: |
    #     $stack install --test --bench --force-dirty --ghc-options=-fforce-recomp --ghc-options=-Werror --ghc-options=-split-sections --no-terminal
    #     # build quicker when tweaking ci: $stack install --ghc-options=-Werror --ghc-options=-split-sections --no-terminal
    #     # -split-sections shrinks binaries by 30% on average here
    #     # --pedantic --no-run-benchmarks
    #   if: env.CONTINUE

    # Packages are built one at a time to fail faster on error.
    # Note: doctests won't run if using GHC 9.0, see hledger-lib/package.yaml
    - name: Build all hledger modules fast, warning free, run unit/doc/bench tests
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack install --fast --force-dirty --ghc-options=-fforce-recomp --ghc-options=-Werror  --test --bench hledger-lib
        $stack install --fast --force-dirty --ghc-options=-fforce-recomp --ghc-options=-Werror  --test --bench hledger
        $stack install --fast --force-dirty --ghc-options=-fforce-recomp --ghc-options=-Werror  --test --bench hledger-ui
        $stack install --fast --force-dirty --ghc-options=-fforce-recomp --ghc-options=-Werror  --test --bench hledger-web
        #  --ghc-options=-split-sections --no-terminal
      if: env.CONTINUE

    - name: Check embedded files
      run: |
        tools/checkembeddedfiles
      if: env.CONTINUE

    - name: Install shelltestrunner
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        export PATH=~/.local/bin:$PATH
        if [[ ! -x ~/.local/bin/shelltest ]]; then $stack install shelltestrunner-1.9; fi
        shelltest --version
      if: env.CONTINUE

    - name: Test functional tests (excluding addons)
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        export PATH=~/.local/bin:$PATH
        COLUMNS=80 $stack exec -- shelltest --execdir -j16 hledger/test -x /_ -x /addons -x ledger-compat/baseline -x ledger-compat/regress -x ledger-compat/collected
        # XXX run the bin/ func tests corresponding to the GHC version enabled above, only
      if: env.CONTINUE

    - name: Test haddock generation
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        time $stack build --fast --haddock --no-haddock-deps --no-haddock-hyperlink-source --haddock-arguments="--no-print-missing-docs"
        # --no-haddock-hyperlink-source is 25% faster
        # --no-print-missing-docs is 600% quieter
      if: env.CONTINUE

    - name: Gather binaries
      id: exes
      run: |
        mkdir tmp
        cd tmp
        cp -P ~/.local/bin/hledger .
        cp -P ~/.local/bin/hledger-ui .
        cp -P ~/.local/bin/hledger-web .
        strip hledger
        strip hledger-ui
        strip hledger-web
        tar cvf hledger-linux-x64.tar hledger hledger-ui hledger-web
      if: env.CONTINUE

      # how to set a context variable, and an attempt to make a nice artifact version suffix:
      # echo "::set-output name=version::$(git branch --show-current | sed 's/-.*//')-$(git rev-parse --short HEAD)"

    # upload-artifact loses execute permissions, so we tar the binaries to preserve them.
    # github UI always zips artifacts when they are downloaded, so we don't bother compressing the tar.
    # Unfortunately it means users must both unzip and untar.
    - name: Upload binaries artifact
      uses: actions/upload-artifact@v3
      with:
        name: hledger-linux-x64
        path: tmp/hledger-linux-x64.tar
      if: env.CONTINUE




    # - name: show stuff
    #   run: |
    #     if [[ -e ~/.local/bin ]]; then ls -lFRa ~/.local/bin; fi

    # inspect available context info, per
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions.
    # sample output: https://github.com/simonmichael/hledger/runs/1619227104
    # - name: Dump GitHub context
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github) }}
    #   run: echo "$GITHUB_CONTEXT"
    # - name: Dump job context
    #   env:
    #     JOB_CONTEXT: ${{ toJson(job) }}
    #   run: echo "$JOB_CONTEXT"
    # - name: Dump steps context
    #   env:
    #     STEPS_CONTEXT: ${{ toJson(steps) }}
    #   run: echo "$STEPS_CONTEXT"
    # - name: Dump runner context
    #   env:
    #     RUNNER_CONTEXT: ${{ toJson(runner) }}
    #   run: echo "$RUNNER_CONTEXT"
    # - name: Dump strategy context
    #   env:
    #     STRATEGY_CONTEXT: ${{ toJson(strategy) }}
    #   run: echo "$STRATEGY_CONTEXT"
    # - name: Dump matrix context
    #   env:
    #     MATRIX_CONTEXT: ${{ toJson(matrix) }}
    #   run: echo "$MATRIX_CONTEXT"
