# Runs on (after) notable pushes to master.
# Failure does not block the push.

# Builds incrementally and runs functional tests on linux,
# using the latest supported GHC version.

name: push CI

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/push.yml'
      - 'stack*.yaml'
      - 'hledger-lib/**'
      - 'hledger/**'
      - 'hledger-ui/**'
      - 'hledger-web/**'
      - 'bin/*.hs'
      - 'examples/**'

      # ignore certain boring paths completely (even if the commit message didn't begin with ;).
      # XXX it would still be nice to check the commit messages.
      #
      # ignore changes to (most?) example files, though some func tests depend on them
      - '!**.journal'
      - '!**.j'
      - '!**.ledger'
      - '!**.csv'
      # ignore changes to doc source files
      - '!**.m4'
      - '!**.md'
      - '!**.1'
      - '!**.5'
      - '!**.info'
      - '!**.txt'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        plan:
        # - { ghc: "86" , stack: "stack --stack-yaml=stack8.6.yaml" }
        # - { ghc: "88" , stack: "stack --stack-yaml=stack8.8.yaml" }
        - { ghc: "810"  , stack: "stack --stack-yaml=stack8.10.yaml" }
        # - { ghc: "90" , stack: "stack --stack-yaml=stack.yaml" }

    steps:

    - name: Check out
      uses: actions/checkout@v2
      # have to fetch everything for git describe for --version
      with: 
        fetch-depth: 0        

    # - name: Print debug output
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github) }}
    #   run: |
    #     echo

    #     echo "$GITHUB_SHA"
    #     echo "$GITHUB_REF"
    #     echo "$GITHUB_HEAD_REF"
    #     echo "$GITHUB_BASE_REF"
    #     git log "$GITHUB_BASE_REF"..
    #     bin/commitlint "$GITHUB_BASE_REF"..

    # keep synced in all workflows which do this
    - name: Check commit messages
      # For a PR, the range will be: master..origin/$GITHUB_HEAD_REF
      # For a push it will be: $BEFORE..
      # For a force push, BEFORE is the previous HEAD, and on github (though not locally) this is an "invalid revision range".
      # In this and any case where the range is invalid, we'll just check the last N commits.
      # related: https://stackoverflow.com/questions/64708371/how-to-run-github-workflow-on-every-commit-of-a-push
      env:
        BEFORE: ${{ github.event.before }}
        NUM:    20
      run: |
        RANGE=${BEFORE:-origin/master}..${GITHUB_HEAD_REF:+origin/$GITHUB_HEAD_REF}
        git rev-list --quiet $RANGE \
          && bin/commitlint  $RANGE \
          || ( echo "could not identify commits, checking last $NUM instead:"; bin/commitlint -$NUM )

    - name: Skip remaining CI steps if latest commit message begins with ;
      run: |
        git log -1 --pretty='%s' ${GITHUB_HEAD_REF:+origin/$GITHUB_HEAD_REF} \
        | grep -qE '^ *;' || echo "CONTINUE=true" >> $GITHUB_ENV 

    # things to be cached/restored:

    - name: Cache stack global package db
      id:   stack-global
      uses: actions/cache@v2
      with:
        path: ~/.stack
        key: ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache stack-installed programs in ~/.local/bin
      id:   stack-programs
      uses: actions/cache@v2
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache .stack-work
      uses: actions/cache@v2
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger-lib/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger-lib/.stack-work
        key: ${{ runner.os }}-hledger-lib-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger-lib/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-lib-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger/.stack-work
        key: ${{ runner.os }}-hledger-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger-ui/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger-ui/.stack-work
        key: ${{ runner.os }}-hledger-ui-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger-ui/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-ui-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    - name: Cache hledger-web/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger-web/.stack-work
        key: ${{ runner.os }}-hledger-web-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('hledger-web/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-web-stack-work-${{ matrix.plan.ghc }}
      if: env.CONTINUE

    # actions:

    - name: Install stack
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH
        # curl -sL https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack
        if [[ ! -x ~/.local/bin/stack ]]; then curl -sL https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack; fi
        stack --version
      if: env.CONTINUE

    - name: Install GHC
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack setup --install-ghc
      if: env.CONTINUE

    - name: Install haskell deps
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack build --only-dependencies
      if: env.CONTINUE

    - name: Build hledger fast
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack build --fast --ghc-options=-Werror --force-dirty
        # --ghc-options=-fforce-recomp   # needed occasionally to clear out stale compiled modules
        #  --pedantic
      if: env.CONTINUE

    - name: Install shelltestrunner
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        export PATH=~/.local/bin:$PATH
        if [[ ! -x ~/.local/bin/shelltest ]]; then $stack install shelltestrunner-1.9; fi
        shelltest --version
      if: env.CONTINUE

    - name: Test functional tests (excluding addons)
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        export PATH=~/.local/bin:$PATH
        COLUMNS=80 $stack exec -- shelltest --execdir -j16 hledger/test -x /_ -x /addons  #  bin
        # XXX func tests in bin are run only with GHC 8.2 for now
      if: env.CONTINUE
